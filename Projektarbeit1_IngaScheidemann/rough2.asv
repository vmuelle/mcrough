close all
clear all
clc

%% Geometry definition
MCmatlab.closeMCmatlabFigures();
model1 = MCmatlab.model;

transmittance = load('rough.mat','transmittance');
model1.lightSource.

model1.G.nx                = 200; % Number of bins in the x direction
model1.G.ny                = 200; % Number of bins in the y direction
model1.G.nz                = 200; % Number of bins in the z direction
model1.G.Lx                = 0.1; % x size of simulation cuboid in cm
model1.G.Ly                = 0.1; % y size of simulation cuboid in cm
model1.G.Lz                = 0.06; % z size of simulation cuboid in cm

model1.G.mediaPropertiesFunc = @mediaPropertiesFunc; % Media properties defined as a function at the end of this file
model1.G.geomFunc          = @geometryDefinition; % Function to use for defining the distribution of media in the cuboid. 

model1 = plot(model1,'G');

%% Monte Carlo simulation
model1.MC.simulationTimeRequested  = .1; % Time duration of the simulation in min
model1.MC.nExamplePaths            = 100;
model1.MC.matchedInterfaces        = false;
model1.MC.smoothingLengthScale     = model1.G.Lx*10;
model1.MC.boundaryType             = 1; % 1: All cuboid boundaries are escaping
model1.MC.wavelength               = 470; % Excitation wavelength in nm, used for determination of optical properties for excitation light

model1.MC.lightSource.sourceType   = 5; % 5: X/Y factorizable beam (e.g., a rectangular LED emitter)

model1.MC.lightSource.focalPlaneIntensityDistribution.XDistr = 0; % X focal plane intensity distribution - 0: Top-hat
model1.MC.lightSource.focalPlaneIntensityDistribution.XWidth = .02; % X focal plane in cm, 1/e^2 radius if top-hat

model1.MC.lightSource.focalPlaneIntensityDistribution.YDistr = 0; % Y focal plane intensity distribution - 0: Top-hat
model1.MC.lightSource.focalPlaneIntensityDistribution.YWidth = .01; % Y focal plane in cm, 1/e^2 radius if top-hat

model1.MC.lightSource.angularIntensityDistribution.XDistr = 2; % X angular intensity distribution - 2: Cosine (Lambertian)
model1.MC.lightSource.angularIntensityDistribution.YDistr = 2; % Y angular intensity distribution - 2: Cosine (Lambertian)


model1 = runMonteCarlo(model1);
model1 = plot(model1,'MC');
fluence = model1.MC.normalizedFluenceRate(:,:,:);
transmittance = model1.MC.lightCollector.image;
save('rough.mat','fluence');
%MCmatlab.plotAzFz(model1);





%% Geometry function(s) (see readme for details)
% A geometry function takes as input X,Y,Z matrices as returned by the
% "ndgrid" MATLAB function as well as any parameters the user may have
% provided in the definition of Ginput. It returns the media matrix M,
% containing numerical values indicating the media type (as defined in
% mediaPropertiesFunc) at each voxel location.
function M = geometryDefinition(X,Y,Z,parameters)
  rest_PD = 0.005;
  PD_thick = 0.015 -rest_PD;
  RD_thick = 0.15;
  Hypo_thick = 0.1;
  Muskel_thick = 0.225;
  M = ones(size(X)).*4; % 
  M(Z > PD_thick) = 5; % 
  M(Z > PD_thick + RD_thick) = 6; % 
  M(Z > PD_thick + RD_thick + H) = 6; % 
  M(Z > PD_thick + RD_thick) = 6; % 
end

%% Media Properties function (see readme for details)
% The media properties function defines all the optical and thermal
% properties of the media involved by filling out and returning a
% "mediaProperties" array of "mediumProperties" objects with various
% properties. The j indices are the numbers that are referred to in the
% geometry function (in this case, 1 for "air" and 2 for "standard tissue")
% See the readme file or the examples for a list of properties you may
% specify. Most properties may be specified as a numeric constant or as
% function handles.
% 
% The function must take one input; the cell array containing any special
% parameters you might specify above in the model file, for example
% parameters that you might loop over in a for loop. In most simulations
% this "parameters" cell array is empty. Dependence on wavelength is shown
% in examples 4 and 23. Dependence on excitation fluence rate FR,
% temperature T or fractional heat damage FD can be specified as in
% examples 12-15.
function mediaProperties = mediaPropertiesFunc(parameters)
  mediaProperties = MCmatlab.mediumProperties;

  j=1;
  mediaProperties(j).name  = 'Air';
  mediaProperties(j).mua   = 1e-8; % Absorption coefficient in cm^-1
  mediaProperties(j).mus   = 1e-8; % Scattering coefficient in cm^-1
  mediaProperties(j).g     = 1; % Henyey-Greenstein scattering anisotropy
  mediaProperties(j).n     = 1; % Refractive index

  j=2;
  lambda = 470; % wavelength in nm
  SC_Vw = 0.05; % fraction of water
  mua_w_470 = 2.47*1e-4; % absorption coefficient for water at 470 nm in cm^-1
  mua_baseline = 7.84*10^7*lambda^-3.255; 
  mediaProperties(j).name  = 'Stratum Corneum';
  mediaProperties(j).mua   = ((0.1-0.3*10^-4*lambda)+0.125*mua_baseline)*(1-SC_Vw)*mua_w_470; % Absorption coefficient in cm^-1
  mediaProperties(j).mus   = 121.6; % Scattering coefficient in cm^-1
  mediaProperties(j).g     = 0.91; % Henyey-Greenstein scattering anisotropy
  mediaProperties(j).n     = 1.5; % Refractive index

  j=3;
  LE_Vmel = 0.11; % fraction of melanin
  LE_Vw = 0.2; % fraction of water
  mua_mel_470 = 834.6; % absorption coefficient for melanin at 470 nm in cm^-1
  mediaProperties(j).name  = 'Living Epidermis';
  mediaProperties(j).mua   = (LE_Vmel*mua_mel_470+(1-LE_Vmel)*mua_baseline)*(1-LE_Vw)+LE_Vw*mua_w_470; % Absorption coefficient in cm^-1
  mediaProperties(j).mus   = 121.6; % Scattering coefficient in cm^-1
  mediaProperties(j).g     = 0.8; % Henyey-Greenstein scattering anisotropy
  mediaProperties(j).n     = 1.34; % Refractive index

  j=4;
  mediaProperties(j).name  = 'Stratum Papillare';
  mediaProperties(j).mua   = 7.19; % Absorption coefficient in cm^-1
  mediaProperties(j).mus   = 124.1; % Scattering coefficient in cm^-1
  mediaProperties(j).g     = 0.9; % Henyey-Greenstein scattering anisotropy
  mediaProperties(j).n     = 1.4; % Refractive index

  j=5;
  mediaProperties(j).name  = 'Stratum Reticulare';
  mediaProperties(j).mua   = 6.88; % Absorption coefficient in cm^-1
  mediaProperties(j).mus   = 124.1; % Scattering coefficient in cm^-1
  mediaProperties(j).g     = 0.8; % Henyey-Greenstein scattering anisotropy
  mediaProperties(j).n     = 1.4; % Refractive index

  j=6;
  mediaProperties(j).name  = 'Hypodermis';
  mediaProperties(j).mua   = 16.5; % Absorption coefficient in cm^-1
  mediaProperties(j).mus   = 119.4; % Scattering coefficient in cm^-1
  mediaProperties(j).g     = 0.75; % Henyey-Greenstein scattering anisotropy
  mediaProperties(j).n     = 1.44; % Refractive index

  j=7;
  mediaProperties(j).name  = 'Muskel';
  mediaProperties(j).mua   = 4.06; % Absorption coefficient in cm^-1
  mediaProperties(j).mus   = 85.7; % Scattering coefficient in cm^-1
  mediaProperties(j).g     = 0.7748; % Henyey-Greenstein scattering anisotropy
  mediaProperties(j).n     = 1.41; % Refractive index

  j=8;
  mediaProperties(j).name  = 'Knochen';
  mediaProperties(j).mua   = 1.26; % Absorption coefficient in cm^-1
  mediaProperties(j).mus   = 308.8; % Scattering coefficient in cm^-1
  mediaProperties(j).g     = 0.93; % Henyey-Greenstein scattering anisotropy
  mediaProperties(j).n     = 1.41; % Refractive index
end